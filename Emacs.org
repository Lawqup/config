#+title: Emacs Configuration
#+author: Lawrence Qupty
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes :results silent

This org file can generate an =init.el= file that Emacs can use as a config. To generate, run ~M-x org-babel-tangle~.

* Preconfiguration
** Variables

Variables to be used across the entire config

#+begin_src emacs-lisp
  (defvar vars/default-font-size 130)
#+end_src

** Passwords

Configure password and authentication related things, like where to store authtokens.

#+begin_src emacs-lisp
  ;; set authentication tokens file
  (setq auth-sources '("~/.authinfo"))
#+end_src

** Dealing with Emacs chicanery

Set backup directory to not be the directory of the backed-up file, and =custom-set-variables= shouldn't write directly in =init.el=.

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

Also, make sure environement variables carry over to emacs from the shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

** Package management

Initialize package sources.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))
#+end_src

Setup use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

Install straight.el for advanced package management.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el"
                           user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Basic UI Configuration

First, remove useless UI features

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable thetoolbr
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable menu bar
  (setq use-dialog-box nil)   ; Dialog boxes are for mouse users (bad!)
#+end_src

Set up relative line numbers, and set which types of files should have them.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (menu-bar--display-line-numbers-mode-relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font setup

Set default font with =vars/default-font/size=.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :weight 'light
                      :height vars/default-font-size)

#+end_src

Set fixed (monospace) and variable width fonts.

#+begin_src emacs-lisp
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono" :height 140)

  (set-face-attribute 'variable-pitch nil
                      :font "DejaVu Sans" :height 180 :weight 'regular)
#+end_src

Install font with icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** Theme setup

Install and setup doom modeline and doom themes.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-challenger-deep t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    ;; use "doom-colors" for less minimal icon theme
    (setq doom-themes-treemacs-theme "doom-atom")    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* Keybinding Config

Here are all the "general" and mode-agnostic (for the most part) keybindings. Every keybinding related to a specific mode or package will be configured near that package.

** Evil

Use Evil for Vim keybindings (based)

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-fine-undo t) 
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-SPC")
      'evil-delete-backward-char-and-join)
    (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
    (define-key evil-motion-state-map (kbd ";") 'evil-ex)
    (define-key evil-motion-state-map (kbd "H")
      'evil-first-non-blank-of-visual-line)
    (define-key evil-motion-state-map (kbd "L") 'evil-end-of-visual-line)
    (global-unset-key (kbd "C-r"))
    
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

Extend Evil keybindings to places Evil doesn't reach by default, like =help-mode=.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** General

General makes it easy to add keybindings. For an example, see how it is used to configure [[Magit]] or [[*Counsel + Ivy addons][Counsel]].

#+begin_src emacs-lisp
  (use-package general)
#+end_src

** Window management
*** Ace-window

Ace-window makes window movement and management simple. Use ~M-o~ to call =ace-window=.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-dispatch-always t)
    (setq aw-ignore-on nil))
#+end_src

**** Keybindings

    - ~x~ - delete window
    - ~m~ - swap windows
    - ~M~ - move window
    - ~c~ - copy window
    - ~j~ - select buffer
    - ~n~ - select the previous window
    - ~u~ - select buffer in the other window
    - ~c~ - split window fairly, either vertically or horizontally
    - ~v~ - split window vertically
    - ~b~ - split window horizontally
    - ~o~ - maximize current window
    - ~?~ - show these command bindings

*** Winner

Winner allows restoration of window config with ~C-c <left>~ (undo) and ~C-c <right>~ (redo)

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Misc Keybindings
*** Custom emacs behavior

Kill a buffer without needing to ask for confirmation, unless that buffer is modified.

#+begin_src emacs-lisp
  (setq kill-buffer-query-functions
        (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  (general-define-key
   "C-x k" 'kill-buffer-and-window
   "C-x C-k" 'message-kill-buffer)
#+end_src

*** General Keybindings

#+begin_src emacs-lisp
  (general-define-key
   "<escape>" 'keyboard-escape-quit
   "C-x C-h" 'counsel-switch-buffer)
#+end_src

*** Evil-org-mode

Evil keybindings in Org mode stuff. List of keybindings can be found [[https://github.com/Somelauw/evil-org-mode][here]].

#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* Version Control and Package Management
** Projectile

Projectile makes it easy to manage projects across directories. ~C-c p~ brings up the projectile menu.

#+begin_src emacs-lisp
    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :custom ((projectile-completion-system 'ivy))
      :init
      ;; NOTE: Set this to the folder where you keep your Git repos!
      (when (file-directory-p "~/Documents/Code")
        (setq projectile-project-search-path '("~/Documents/Code")))
      (setq projectile-switch-project-action #'projectile-dired))

    (general-define-key
     "C-c p" '(projectile-command-map :which-key))
#+end_src

Use counsel autocompletion with projectile mode

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** Magit

Magit makes git based and coolpilled. ~C-x g~ brings up =magit-status=.

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

Escape Magit popups with =<escape>=.

#+begin_src emacs-lisp
  (general-define-key
     :keymaps 'transient-base-map
     "<escape>" 'transient-quit-one)
#+end_src

** Forge

Forge allows you to see and edit issues, pull requests, etc and use Github, Gitlab, and other systems all from your Magit-Status

In order to use remote version control systems, however, you need to login via an auth token. A guide is shown [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][here]].

#+begin_src emacs-lisp
  (use-package forge)
#+end_src

* Autocompletion and LSP

Here goes everything related to autocompletion, including Emacs as a whole and specific programming languages.

** Counsel + Ivy

Configure Ivy, setting relevant keybindings.

#+begin_src emacs-lisp
  (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :init (ivy-mode 1))
#+end_src

Configure counsel. Counsel should be installed with Ivy, but we can use =use-package= for easy configuration.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
#+end_src

** Counsel + Ivy addons

Use =which-key= which displays a keybinding's possible completions after ~0.3~ seconds of no input. Also use =ivy-rich= for a better Ivy interface.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src

Use this so Ivy doesn't inherit fonts from whichever mode the file is. Without this, for example, =.org= files will be a scuffed variable-pitched font instead of the same as everything else.

#+begin_src emacs-lisp
  (with-eval-after-load 'ivy-faces
    (set-face-attribute 'ivy-org nil :inherit 'default))
#+end_src

Helpful gives quick information for Counsel items.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

* Documents
** Latex

Use Auctex for many emacs latex features.

#+begin_src emacs-lisp
  (defun lq/auctex-setup ()
    (lsp)
    (visual-line-mode 1)
    (flyspell-mode 1)
    (prettify-symbols-mode)
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (local-unset-key (kbd "C-c C-c"))
    (local-set-key (kbd "C-c C-c")
                   (lambda ()
                     (interactive)
                     (TeX-command-run-all nil))))
  (use-package auctex
    :defer t
    :hook (LaTeX-mode . lq/auctex-setup))


  (setq TeX-parse-self t); Enable parse on load.
  (setq TeX-auto-save t); Enable parse on save.

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Auto revert pdf buffer
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  ;; Dont save on compile
  (setq TeX-save-query nil)
#+end_src

** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools)
  (pdf-tools-install)  ; Standard activation command
#+end_src

* Org Mode
** Font Setup

Set up helper function to define fonts and sizes for specific indentation levels and styles. Also replace the list hyphen =-= with a dot =•=.

#+begin_src emacs-lisp
  (defun lq/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 ()
                                    (compose-region
                                     (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font "DejaVu Sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** General Config Setup

Helper function that will run as a hook to setup basic things including some UI.

#+begin_src emacs-lisp
  (defun lq/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))
#+end_src

** Tie Everything Together

Using the helper functions defined in [[Font Setup]] and [[General Config Setup]], we can tie everything together.

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . lq/org-mode-setup)
    :config
    (lq/org-font-setup))
#+end_src

** Org Refile

Define which files can be targets for refiling. Right now refiling is only used to move once-active agenda items to an archive.

#+begin_src emacs-lisp
  (setq org-refile-targets
        '(("archive.org" :maxlevel . 1)
          ("todo.org" :maxlevel . 1)))
#+end_src

Automatically save org buffers on refile, so we don't need to go to the file to do it manually, as that kinda defeats the purpose of =org-refile=.

#+begin_src emacs-lisp
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Org Agenda

Define which files affect =Org-agenda= and setup =TODO= behavior.

#+begin_src emacs-lisp
    (setq org-agenda-files '("~/Documents/Org"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
#+end_src

Enter agenda using ~C-c a~.

#+begin_src emacs-lisp
  (general-define-key
   "C-c a" '(org-agenda :which-key))
#+end_src

** Capture Templates

Define capture templates for quick journaling, adding =TODOs=, logging weight, and more.

#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Documents/Org/todo.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("td" "Deadlined Task" entry (file+olp "~/Documents/Org/todo.org" "Active")
           "* TODO %?\nDEADLINE: %^t\n" :empty-lines 1)
          ("ts" "Scheduled Task" entry (file+olp "~/Documents/Org/todo.org" "Active")
           "* TODO %?\nSCHEDULED: %^t\n" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/Org/journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
          ("jm" "Meeting" entry
           (file+olp+datetree "~/Documents/Org/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry
           (file+olp+datetree "~/Documents/Org/journal.org")
           "* Checking Email :email:\n\n%?"
           :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line
           (file+headline "~/Documents/Org/stats.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

#+end_src

=Org-capture= can be reached with ~C-c c~.

#+begin_src emacs-lisp
  (general-define-key
   "C-c c" '(org-capture :which-key))
#+end_src

** Org Bullets

Replaces org-mode header asterisks with bullets as listed, by order of indentation level.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual Fill

Define visual-fill params to add bars on the sides for ease of reading.

#+begin_src emacs-lisp
  (defun lq/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
#+end_src

Then use the function we just defined:

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . lq/org-mode-visual-fill))
#+end_src

** Extra UI Features

Use unicode checkboxes with =prettify-symbols-mode=.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
     (push '("[ ]" . "☐") prettify-symbols-alist)
     (push '("[X]" . "☑" ) prettify-symbols-alist)
     (push '("[-]" . "❍" ) prettify-symbols-alist)
     (prettify-symbols-mode)))
#+end_src

Make sure indenting is fixed pitch to keep consistent indentation across levels.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-indent
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch)))
#+end_src

And change the elipsis to be an arrow.

#+begin_src emacs-lisp
  (setq org-ellipsis " ▾")
#+end_src

** Extra Ease of Use

Allow toggling of emphasis markers with ~C-c e~. 

#+begin_src emacs-lisp
  (defun org-toggle-emphasis ()
    (interactive)
    (if org-hide-emphasis-markers
        (set-variable 'org-hide-emphasis-markers nil)
      (set-variable 'org-hide-emphasis-markers t))
    (org-mode-restart))

  (general-define-key
   :keymaps 'org-mode-map
   "C-c e" '(org-toggle-emphasis :which-key))
#+end_src

** Pandoc

Pandoc allows files to be parsed to and from org. For example, ~M-x org-pandoc-import-latex-as-org~ parses a latex file into an org file.

#+begin_src emacs-lisp
  (use-package org-pandoc-import
    :straight (:host github
               :repo "tecosaur/org-pandoc-import"
               :files ("*.el" "filters" "preprocessors")))
#+end_src

** Structure Templates

For example, create a source block for elisp by typing ~<el<TAB>~

#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Babel Setup

Setup languages and not require confirmation to run src block.

#+begin_src emacs-lisp
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (shell . t)))
  
    (setq org-confirm-babel-evaluate nil)
#+end_src

** Auto-tangle

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/configRepo/config/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org timer

Specify the timer end sound for org timer.

#+begin_src emacs-lisp
  (setq org-clock-sound "~/.emacs.d/assets/ding.wav")
#+end_src

* Development
** Languages
*** JS stuff
**** Javascript

#+begin_src emacs-lisp
  (setq-default js-indent-level 2)
#+end_src

**** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

Make sure =ts-ls= is downloaded

#+begin_src sh :results silent
  npm install -g typescript-language-server typescript
#+end_src

**** JSX

#+begin_src emacs-lisp
  (use-package rjsx-mode)
#+end_src

**** TSX

#+begin_src emacs-lisp
      (use-package web-mode
        :mode "\\.tsx\\'"
        :hook
        (web-mode . lsp-deferred))
#+end_src

**** Json

#+begin_src emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'"
    :config
    (add-to-list 'flycheck-disabled-checkers 'json-python-json))
#+end_src

**** Prettier

#+begin_src emacs-lisp
  (use-package prettier
    :hook
    ((typescript-mode json-mode web-mode) . prettier-mode))
#+end_src

*** Python

Download the =pyls= language server.

#+begin_src sh
  pip install --user "python-lsp-server"
#+end_src

Use =python-mode= and flycheck.

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :hook
    (python-mode . lsp-deferred))
#+end_src

Run the =python-black= formatter on save.

#+begin_src emacs-lisp
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode))
#+end_src

Use LSP-mode in src block buffers (access when on python source block with ~C-c ‘~)

#+begin_src emacs-lisp
  (defun org-babel-edit-prep:python (babel-info)
    (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
    (lsp))
#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
#+end_src

*** Java

#+begin_src emacs-lisp
  (use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp))
#+end_src

*** Haskell

#+begin_src emacs-lisp
      (use-package lsp-haskell
        :config
        (setq))

      (use-package haskell-mode
         :hook (haskell-mode . lsp-deferred))
#+end_src

*** C/C++

#+begin_src emacs-lisp
   (use-package cc-mode
     :hook (c-mode . lsp)
     :hook (c++-mode . lsp))

   (use-package flycheck-google-cpplint)

   (eval-after-load 'flycheck
   '(progn
      (require 'flycheck-google-cpplint)
      ;; Add Google C++ Style checker.
      ;; In default, syntax checked by Clang and Cppcheck.
      (flycheck-add-next-checker 'c/c++-gcc
                                 '(warning . c/c++-googlelint))))
  (custom-set-variables
   '(flycheck-googlelint-verbose "3")
   '(flycheck-googlelint-filter "-whitespace,+whitespace/braces")
   '(flycheck-googlelint-root "project/src")
   '(flycheck-googlelint-linelength "120"))
#+end_src

** Debugging

Setup DAP-mode

#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

*** Java

#+begin_src emacs-lisp
  (dap-register-debug-template "My Runner"
                               (list :type "java"
                                     :request "launch"
                                     :args ""
                                     :vmArgs "-ea -Dmyapp.instance.name=myapp_1"
                                     :projectName "myapp"
                                     :mainClass "com.domain.AppRunner"
                                     :env '(("DEV" . "1"))))
#+end_src

** Language server config
*** LSP mode

=LSP-mode= enables the protocol that allows connecting to language servers.

#+begin_src emacs-lisp
  (defun lq/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (setq lsp-completion-provider :none) ;; don't touch company backends
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . lq/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** LSP mode extras

=LSP-ui= for better LSP UI.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** Company mode

Better completions than =completions-at-point=!

#+begin_src emacs-lisp
  (global-company-mode)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

Yasnippet integration with company.

#+begin_src emacs-lisp
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas)
            (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+end_src

** Treemacs

=LSP-treemacs= for tree file view.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
      :after lsp)

  (defun lq/treemacs-display-then-switch-right ()
    "Display current project in treemacs then switch window right"
    (interactive)
    (treemacs-display-current-project-exclusively)
    (windmove-right))

  (general-define-key
   "<f7>" 'treemacs
   "<f8>" 'lq/treemacs-display-then-switch-right)
  
#+end_src

=treemacs-projectile= for switching treemacs workspace to projects automatically

#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :ensure t
    :after (treemacs projectile))
#+end_src

** Commenting

Use "M-/" to comment highlighted lines.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Delimiters and Tabs

Use Rainbow Delimiters to make it easier to see different layers of nesting.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Enable =electric-pair-mode= by default. Use ~C-q [DELIM]~ to insert a single delimiter.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

Evil-surround emulates [[https://github.com/tpope/vim-surround][surround.vim]].

Surround highlighted text (in visual mode) with a delim using ~S~ if you want to surround on a line above and under, use ~g S~.

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

Auto format tabs to spaces.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (use-package editorconfig
      :config
      (editorconfig-mode 1))
#+end_src

** Yasnippet

Yasnippet provides placing code snippets in code.

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config (setq yas-snippet-dirs '("~/configRepo/config/snippets"))
    (yas-global-mode 1))
#+end_src

* Terminal
** Term

One important thing to understand is line-mode versus char-mode. line-mode enables you to use normal Emacs keybindings while moving around in the terminal buffer while char-mode sends most of your keypresses to the underlying terminal. While using term-mode, you will want to be in char-mode for any terminal applications that have their own keybindings. If you’re just in your usual shell, line-mode is sufficient and feels more integrated with Emacs.

With evil-collection installed, you will automatically switch to char-mode when you enter Evil’s insert mode. You will automatically be switched back to line-mode when you enter Evil’s normal mode.

Run a terminal with ~M-x term~!

Useful key bindings:

    ~C-c C-n~ / ~C-c C-p~ - go forwards and backwards in the buffer’s prompts (also ~]]~ and ~[[~ with evil-mode)
    ~C-c C-k~ - Enter char-mode
    ~C-c C-j~ - Return to line-mode
    
#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to bash, etc
  
    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^~\n]*[~] *"))
#+end_src

Turn on better colors:

#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** VTerm

VTerm is just better Term

#+begin_src emacs-lisp

  (use-package vterm
    :bind
    ("<f2>" . vterm)
    :config
    (setq vterm-max-scrollback 10000))
  
#+end_src

* File management
** Dired
*** Config

Dired is a mode made for file management.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq dired-kill-when-opening-new-dired-buffer t) ; only have 1 dired buffer
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

Add file icons in dired.

#+begin_src emacs-lisp
    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode)
      :config (setq all-the-icons-dired-monochrome nil))
#+end_src

Open certain files with certain commands.

#+begin_src emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("jpg" . "feh")
                                  ("mkv" . "mpv")
                                  ("docx" . "libreoffice"))))
#+end_src

Hide dotfiles by default. Use ~H~ to toggle them back on or off.

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

*** Key Bindings
**** Navigation

- ~j~ - next line
- ~k~ - previous line
- ~J~ - jump to file in buffer
- ~H~ - go to parent directory
- ~g O~  - Open file in “other” window
- ~M-RET~ - Show file in other window without focusing (previewing files)
- ~g o~ - Open file but in a “preview” mode, close with q
- ~g r~ - Refresh the buffer with revert-buffer after changing configuration (and after filesystem changes!)
  
**** Marking files

- ~m~ - Marks a file
- ~u~ - Unmarks a file
- ~U~ - Unmarks all files in buffer
- ~t~ - Inverts marked files in buffer
- ~% m~ - Mark files in buffer using regular expression
- ~*~ - Lots of other auto-marking functions
- ~K~ - “Kill” marked items (refresh buffer with ~g r~ to get them back) Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- ~C~ - Copy marked files (or if no files are marked, the current file) Copying single and multiple files
- ~U~ - Unmark all files in buffer
- ~R~ - Rename marked files, renaming multiple is a move!
- ~% R~ - Rename based on regular expression: ^test , old-\&

Power command: ~C-x C-q~ (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them! Press ~Z Z~ to confirm renaming or ~Z Q~ to abort.

**** Deleting files

- ~D~ - Delete marked file
- ~d~ - Mark file for deletion
- ~x~ - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently
  
**** Creating and extracting archives

- ~Z~ - Compress or uncompress a file or folder to (.tar.gz)
- ~c~ - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- ~T~ - Touch (change timestamp)
- ~M~ - Change file mode
- ~O~ - Change file owner
- ~G~ - Change file group
- ~S~ - Create a symbolic link to this file
- ~L~ - Load an Emacs Lisp file into Emacs

  
